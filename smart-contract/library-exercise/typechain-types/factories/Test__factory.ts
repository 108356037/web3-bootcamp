/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Test, TestInterface } from "../Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_c",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_arr",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_target",
        type: "uint256",
      },
    ],
    name: "findNumInArr",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
    ],
    name: "getMaxUsingMathLib",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
    ],
    name: "getMinUsingMathLib",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getStorageArr",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "_arr",
        type: "uint256[]",
      },
    ],
    name: "peekFirstItem",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewAddressLib",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107613803806107618339818101604052606081101561003357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050600367ffffffffffffffff8111801561007057600080fd5b5060405190808252806020026020018201604052801561009f5781602001602082028036833780820191505090505b50600090805190602001906100b5929190610114565b5082600080815481106100c457fe5b90600052602060002001819055508160006001815481106100e157fe5b90600052602060002001819055508060006002815481106100fe57fe5b906000526020600020018190555050505061017e565b828054828255906000526020600020908101928215610150579160200282015b8281111561014f578251825591602001919060010190610134565b5b50905061015d9190610161565b5090565b5b8082111561017a576000816000905550600101610162565b5090565b6105d48061018d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806317b0604d1461006757806360f73a9d1461009b57806365a75e6714610128578063afb33bcd146101bf578063dcedadeb1461020b578063ea2fd17c14610257575b600080fd5b61006f6102b6565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610112600480360360208110156100b157600080fd5b81019080803590602001906401000000008111156100ce57600080fd5b8201836020820111156100e057600080fd5b8035906020019184602083028401116401000000008311171561010257600080fd5b90919293919293905050506102be565b6040518082815260200191505060405180910390f35b6101a96004803603604081101561013e57600080fd5b810190808035906020019064010000000081111561015b57600080fd5b82018360208201111561016d57600080fd5b8035906020019184602083028401116401000000008311171561018f57600080fd5b909192939192939080359060200190929190505050610312565b6040518082815260200191505060405180910390f35b6101f5600480360360408110156101d557600080fd5b810190808035906020019092919080359060200190929190505050610433565b6040518082815260200191505060405180910390f35b6102416004803603604081101561022157600080fd5b810190808035906020019092919080359060200190929190505050610450565b6040518082815260200191505060405180910390f35b61025f61046d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102a2578082015181840152602081019050610287565b505050509050019250505060405180910390f35b600030905090565b600061030a838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506104c5565b905092915050565b6000838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505073__$6ad30996409d058139477db06ae39abaac$__63cd7326039091846040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019060200280838360005b838110156103cb5780820151818401526020810190506103b0565b50505050905001935050505060206040518083038186803b1580156103ef57600080fd5b505af4158015610403573d6000803e3d6000fd5b505050506040513d602081101561041957600080fd5b810190808051906020019092919050505090509392505050565b6000610448828461053c90919063ffffffff16565b905092915050565b6000610465828461055690919063ffffffff16565b905092915050565b606060008054806020026020016040519081016040528092919081815260200182805480156104bb57602002820191906000526020600020905b8154815260200190600101908083116104a7575b5050505050905090565b600080825111610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610571602e913960400191505060405180910390fd5b8160008151811061052d57fe5b60200260200101519050919050565b60008183111561054c578161054e565b825b905092915050565b6000818310156105665781610568565b825b90509291505056fe6172726179206c656e677468206d75737420636f6e7461696e206174206c65617374206f6e6520656c656d656e74a26469706673582212200c06106a48eabf533f88239e21459d7953bbb0d45b99b025679260bd94adb67064736f6c63430007060033";

type TestConstructorParams =
  | [linkLibraryAddresses: TestLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Test__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: TestLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$6ad30996409d058139477db06ae39abaac\\$__", "g"),
      linkLibraryAddresses["contracts/Math.sol:Math"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override deploy(
    _a: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BigNumberish>,
    _c: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(_a, _b, _c, overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    _a: PromiseOrValue<BigNumberish>,
    _b: PromiseOrValue<BigNumberish>,
    _c: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_a, _b, _c, overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}

export interface TestLibraryAddresses {
  ["contracts/Math.sol:Math"]: string;
}
